# CLAUDE.md - {{ project_name }}

> **Documento maestro del proyecto** - Gu√≠a completa para Claude Code y desarrolladores

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

---

## üìö **Sistema de Documentaci√≥n**

```
üöÄ README.md               ‚Üí Documentaci√≥n principal
üìñ CLAUDE.md (EST√ÅS AQU√ç)  ‚Üí Documentaci√≥n completa para Claude Code
üìã .claude/PLANNING.md     ‚Üí Arquitectura y planificaci√≥n
üìã .claude/TASK.md         ‚Üí Tareas actuales y progreso
```

---

## üéØ **Misi√≥n del Proyecto**

{{ goal }}

### **Problema que Resolvemos**
- **Entrada**: {{ input_description|default("Data from configured sources") }}
- **Proceso**:
  {% if workflow_steps %}
  {% for step in workflow_steps %}
  - {{ step }}
  {% endfor %}
  {% else %}
  - Data collection
  - Processing and transformation
  - Output generation
  {% endif %}
- **Salida**: {{ output_description|default("Processed data in target format") }}

### **Estado Actual del Sistema**

**Progreso Actual:**
- [x] Fase 1: Project setup - ‚úÖ COMPLETADO
- [ ] Fase 2: Core implementation - üîÑ EN PROGRESO
- [ ] Fase 3: Testing and validation - üìã PENDIENTE
- [ ] Fase 4: Documentation and optimization - üìã PENDIENTE

**Complejidad**: {{ complexity|capitalize }}

---

## üèóÔ∏è **Arquitectura del Sistema**

{% if complexity == 'simple' %}
**Arquitectura Simple** (Directa y sin complicaciones):

```
User Input
    ‚Üì
{{ project_name }}
    ‚Üì
{% for api in apis %}
{{ api.name }} API
    ‚Üì
{% endfor %}
Output
```

**Componentes principales:**
- Main application (src/main.py or src/index.js)
- API integrations (src/integrations/)
- Utilities (src/utils/)

{% elif complexity == 'medium' %}
**Arquitectura con Orchestrator** (Workflow management):

```
User Input
    ‚Üì
Orchestrator Agent
    ‚îú‚îÄ Intent Analysis
    ‚îú‚îÄ Memory Context
    ‚îî‚îÄ Workflow Execution
        ‚Üì
    API Integrations
    {% for api in apis %}
    ‚îú‚îÄ {{ api.name }}
    {% endfor %}
        ‚Üì
    Output
```

**Componentes principales:**
- Orchestrator (src/orchestrator/agent.py)
- Intent models (src/orchestrator/models.py)
- Memory system (src/orchestrator/memory.py)
- API integrations (src/integrations/)

{% elif complexity == 'high' %}
**Arquitectura Avanzada** (Self-improvement + Orchestration):

```
User Input
    ‚Üì
Orchestrator Agent
    ‚îú‚îÄ Intent Analysis (Pydantic)
    ‚îú‚îÄ Memory Context (.claude/memories/)
    ‚îú‚îÄ Subagent Coordination
    ‚îî‚îÄ Workflow Execution
        ‚Üì
    Specialized Subagents
    {% for agent in suggested_agents %}
    ‚îú‚îÄ {{ agent }}
    {% endfor %}
        ‚Üì
    API Integrations ({{ apis|length }})
        ‚Üì
    Output + Learning
        ‚Üì
    @self-improve Agent
    (Continuous optimization)
```

**Componentes principales:**
- Orchestrator (src/orchestrator/)
- Specialized subagents (src/orchestrator/subagents/)
- Self-improvement agent (.claude/agents/@self-improve.md)
- Memory system with learning
{% endif %}

---

## üìã **Estructura del Proyecto**

```
{{ project_name }}/
‚îú‚îÄ‚îÄ src/                   # C√≥digo fuente
{% if 'Python' in tech_stack %}
‚îÇ   ‚îú‚îÄ‚îÄ main.py           # Entry point
‚îÇ   ‚îú‚îÄ‚îÄ integrations/     # API clients
{% for api in apis %}
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ {{ api.name|lower|replace(' ', '_') }}.py
{% endfor %}
{% if complexity in ['medium', 'high'] %}
‚îÇ   ‚îú‚îÄ‚îÄ orchestrator/     # Orchestration layer
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ agent.py      # Main orchestrator
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ models.py     # Pydantic models
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ memory.py     # Persistent memory
{% endif %}
‚îÇ   ‚îî‚îÄ‚îÄ utils/            # Utilities
‚îÇ
‚îú‚îÄ‚îÄ tests/                # Tests (TDD approach)
‚îÇ   ‚îú‚îÄ‚îÄ unit/
‚îÇ   ‚îú‚îÄ‚îÄ integration/
‚îÇ   ‚îî‚îÄ‚îÄ e2e/
‚îÇ
‚îú‚îÄ‚îÄ .claude/              # Claude Code configuration
‚îÇ   ‚îú‚îÄ‚îÄ PLANNING.md
‚îÇ   ‚îú‚îÄ‚îÄ TASK.md
‚îÇ   ‚îî‚îÄ‚îÄ agents/           # Specialized agents
{% if complexity == 'high' %}
‚îÇ       ‚îî‚îÄ‚îÄ @self-improve.md
{% endif %}
‚îÇ
‚îú‚îÄ‚îÄ config/               # Configuration
‚îú‚îÄ‚îÄ requirements.txt      # Python dependencies
{% elif 'Node.js' in tech_stack %}
‚îÇ   ‚îú‚îÄ‚îÄ index.js          # Entry point
‚îÇ   ‚îú‚îÄ‚îÄ integrations/     # API clients
{% for api in apis %}
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ {{ api.name|lower|replace(' ', '_') }}.js
{% endfor %}
{% if complexity in ['medium', 'high'] %}
‚îÇ   ‚îú‚îÄ‚îÄ orchestrator/     # Orchestration layer
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ agent.js      # Main orchestrator
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ models.js     # Data models
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ memory.js     # Persistent memory
{% endif %}
‚îÇ   ‚îî‚îÄ‚îÄ utils/            # Utilities
‚îÇ
‚îú‚îÄ‚îÄ tests/                # Tests (TDD approach)
‚îÇ   ‚îú‚îÄ‚îÄ unit/
‚îÇ   ‚îú‚îÄ‚îÄ integration/
‚îÇ   ‚îî‚îÄ‚îÄ e2e/
‚îÇ
‚îú‚îÄ‚îÄ .claude/              # Claude Code configuration
‚îÇ   ‚îú‚îÄ‚îÄ PLANNING.md
‚îÇ   ‚îú‚îÄ‚îÄ TASK.md
‚îÇ   ‚îî‚îÄ‚îÄ agents/           # Specialized agents
{% if complexity == 'high' %}
‚îÇ       ‚îî‚îÄ‚îÄ @self-improve.md
{% endif %}
‚îÇ
‚îú‚îÄ‚îÄ config/               # Configuration
‚îú‚îÄ‚îÄ package.json          # Node dependencies
{% endif %}
‚îî‚îÄ‚îÄ README.md
```

---

## üõ†Ô∏è **Comandos de Desarrollo**

### **Configuraci√≥n Inicial**
```bash
# Clonar repositorio
git clone {{ repo_url|default("[repo-url]") }}
cd {{ project_name }}

# Instalar dependencias
{% if 'Python' in tech_stack %}
pip install -r requirements.txt

# Configurar entorno
cp .env.example .env
# Editar .env con tus credenciales
{% elif 'Node.js' in tech_stack %}
npm install

# Configurar entorno
cp .env.example .env
# Editar .env con tus credenciales
{% endif %}
```

### **Comandos Principales**
```bash
# Desarrollo
{% if 'Python' in tech_stack %}python src/main.py{% elif 'Node.js' in tech_stack %}npm run dev{% endif %}

# Testing (TDD)
{% if 'Python' in tech_stack %}pytest{% elif 'Node.js' in tech_stack %}npm test{% endif %}

# Linting
{% if 'Python' in tech_stack %}ruff check .{% elif 'Node.js' in tech_stack %}npm run lint{% endif %}

# Type checking
{% if 'Python' in tech_stack %}mypy src/{% elif 'Node.js' in tech_stack %}npm run typecheck{% endif %}
```

---

## üîß **Variables de Entorno Requeridas**

```bash
{% if apis %}
{% for api in apis %}
# {{ api.name }} API
{{ api.name|upper|replace(' ', '_') }}_API_KEY=your_api_key_here
{% if api.auth_type == 'OAuth2' %}
{{ api.name|upper|replace(' ', '_') }}_CLIENT_ID=your_client_id
{{ api.name|upper|replace(' ', '_') }}_CLIENT_SECRET=your_client_secret
{{ api.name|upper|replace(' ', '_') }}_REDIRECT_URI=http://localhost:3000/callback
{% endif %}

{% endfor %}
{% endif %}
# General
LOG_LEVEL=INFO
DEBUG=false
```

---

## üéØ **Principios de Desarrollo**

### **Core Principles**

1. **TDD Approach - MANDATORY**
   - Write tests BEFORE implementation
   - Tests define expected behavior
   - Target: 100% coverage

2. **Code Quality**
   - Keep files under 500 lines
   - One responsibility per module
   - Clear, descriptive names
   - Document complex logic

3. **Error Handling**
   - Fail fast with clear messages
   - Use appropriate exception types
   - Log errors with context
   - Never silently ignore failures

### **Development Workflow**

```bash
# 1. Write failing test
{% if 'Python' in tech_stack %}
# tests/test_feature.py
def test_new_feature():
    result = new_feature()
    assert result == expected
{% elif 'Node.js' in tech_stack %}
// tests/feature.test.js
test('new feature works', () => {
    const result = newFeature();
    expect(result).toBe(expected);
});
{% endif %}

# 2. Run test (should fail)
{% if 'Python' in tech_stack %}pytest tests/test_feature.py{% elif 'Node.js' in tech_stack %}npm test{% endif %}

# 3. Implement feature
# (write code in src/)

# 4. Run test (should pass)
{% if 'Python' in tech_stack %}pytest tests/test_feature.py{% elif 'Node.js' in tech_stack %}npm test{% endif %}

# 5. Refactor if needed

# 6. Commit
git add .
git commit -m "feat: add new feature with tests"
```

---

## ü§ñ **Agentes Disponibles**

{% if suggested_agents %}
{% for agent in suggested_agents %}
### **{{ agent }}**
See `.claude/agents/{{ agent }}.md` for details.

{% endfor %}
{% else %}
### **@codebase-analyst**
Analyze code patterns and conventions.

### **@library-researcher**
Research external libraries and documentation.
{% endif %}

{% if complexity == 'high' %}
### **@self-improve**
**SPECIAL**: This agent can improve the project itself.
- Analyzes performance bottlenecks
- Suggests architectural improvements
- Optimizes code quality
- See `.claude/agents/@self-improve.md`
{% endif %}

---

## ‚ö†Ô∏è **Recordatorios Cr√≠ticos**

1. **TDD ES OBLIGATORIO** - Nunca escribir c√≥digo antes que tests
2. **API CREDENTIALS** - Nunca commitear credenciales en el c√≥digo
3. **ERROR HANDLING** - Siempre validar inputs de APIs externas
{% if complexity in ['medium', 'high'] %}
4. **MEMORY SYSTEM** - Usa `.claude/memories/` para aprendizaje persistente
5. **ORCHESTRATOR** - Delega workflows complejos al orchestrator
{% endif %}
6. **COVERAGE** - Target 100% test coverage para nuevo c√≥digo
7. **DOCUMENTATION** - Actualiza README y PLANNING cuando cambies arquitectura

---

## üìä **M√©tricas de Performance**

| M√©trica | Objetivo | Actual | Estado |
|---------|----------|--------|--------|
| Test Coverage | 100% | -- | üìã |
| Response Time | <500ms | -- | üìã |
{% if apis %}
{% for api in apis %}
| {{ api.name }} API Uptime | >99% | -- | üìã |
{% endfor %}
{% endif %}

---

## üêõ **Issues Resueltos y Lecciones Aprendidas**

### **Decisiones T√©cnicas**
_(Documentar aqu√≠ decisiones importantes a medida que avanza el proyecto)_

### **Lecciones Aprendidas**
_(Documentar aqu√≠ lecciones aprendidas durante el desarrollo)_

---

*√öltima actualizaci√≥n: {{ current_date }}*
*Versi√≥n: {{ version|default("1.0.0") }}*
*Estado: {{ status|default("Development") }}*
*Generado con: Claude Code + Orchestrator Agent SDK Template*
