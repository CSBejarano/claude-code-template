# 🚀 Quick Start - [NOMBRE_DEL_PROYECTO]

> **Get started in 10 minutes** - Quick setup guide for developers

---

## 📦 Prerequisites

- [ ] [Language/Runtime]: Version X.X+
- [ ] [Package Manager]: npm/pip/cargo/etc
- [ ] [Database/Service]: If applicable
- [ ] [API Keys]: If required

---

## 🛠️ Installation

### 1. Clone & Install

```bash
# Clone repository
git clone [repo-url]
cd [project-name]

# Install dependencies
[install-command]  # npm install / pip install -r requirements.txt / cargo build
```

### 2. Environment Setup

```bash
# Copy environment template
cp .env.example .env

# Edit .env with your configuration
nano .env  # or use your preferred editor
```

**Required Environment Variables:**
```bash
[API_KEY_1]=[your-key-here]
[DATABASE_URL]=[your-database-url]
# Add other required variables
```

### 3. Database Setup (if applicable)

```bash
# Run migrations
[migration-command]

# Seed database (optional)
[seed-command]
```

---

## 🎯 Run the Project

### Development Mode

```bash
[dev-command]  # npm run dev / python main.py / cargo run
```

The application will be available at: `http://localhost:[PORT]`

### Production Build

```bash
# Build
[build-command]  # npm run build / pip install . / cargo build --release

# Run production
[prod-command]   # npm start / gunicorn app:app / ./target/release/app
```

---

## ✅ Verify Installation

```bash
# Run tests
[test-command]  # npm test / pytest / cargo test

# Run linter
[lint-command]  # npm run lint / ruff check / cargo clippy

# Check types
[typecheck-command]  # npm run typecheck / mypy . / cargo check
```

**Expected output:**
- ✅ All tests pass
- ✅ No linting errors
- ✅ Type checking successful

---

## 📚 Next Steps

1. **Read the full documentation**: Check `CLAUDE.md` for complete project guidelines
2. **Understand the architecture**: Review `PLANNING.md` for system design
3. **Check current tasks**: See `TASK.md` for what's in progress
4. **Run your first feature**: Try `/prp-create "your feature idea"`

---

## 🆘 Troubleshooting

### Common Issues

**Issue: [Common Problem 1]**
```bash
# Solution
[fix-command]
```

**Issue: [Common Problem 2]**
```bash
# Solution
[fix-command]
```

**Issue: Dependencies not installing**
```bash
# Clear cache and reinstall
[clear-cache-command]
[install-command]
```

---

## 📖 Key Commands Reference

```bash
# Development
[dev-command]              # Start development server
[test-command]             # Run test suite
[lint-command]             # Check code quality

# Production
[build-command]            # Build for production
[prod-command]             # Run production server

# Utilities
[format-command]           # Format code
[clean-command]            # Clean build artifacts
```

---

## 🤖 AI Assistant Commands

```bash
# Create implementation plan
/prp-create "feature description"

# Execute implementation
/prp-execute PRPs/your-prp.md

# Create story from user story
/story-create "user story"

# Execute story implementation
/story-execute PRPs/story_your-story.md
```

---

## 🔗 Useful Links

- **Documentation**: [Link to docs]
- **API Reference**: [Link to API docs]
- **Contributing**: See `CONTRIBUTING.md`
- **Issues**: [Link to issues]

---

*Last updated: [DATE]*
*For detailed information, see CLAUDE.md*
