"""
E2E Smoke Tests for Full Workflow.

Tests the complete project generation workflow from user request to generated project.
This validates the entire value chain of the Claude Code Template system.
"""

import pytest
import tempfile
from pathlib import Path
import json


class TestE2ESimpleProject:
    """
    E2E test for simple project generation workflow.

    This smoke test validates the most critical path:
    User Request → PRP Analysis → Template Rendering → Generated Project
    """

    def test_simple_project_generation_structure(self):
        """
        Test that a simple project generates expected structure.

        This is a smoke test that validates the basic workflow works
        without requiring the full Orchestrator SDK.

        Validates:
        - Template rendering works
        - Project structure is created
        - Key files are generated
        - Basic content is rendered correctly
        """
        # Simulate user request
        user_request = "Automatizar procesamiento de facturas PDF"
        project_name = "factura_automation"

        with tempfile.TemporaryDirectory() as tmpdir:
            working_dir = Path(tmpdir)
            project_path = working_dir / project_name

            # Simulate template rendering (without full orchestrator)
            # This tests that the template system works independently
            from jinja2 import Environment, FileSystemLoader

            template_dir = Path(".claude/templates/base")
            env = Environment(loader=FileSystemLoader(str(template_dir)))

            # Create project directory
            project_path.mkdir(parents=True)

            # Test variables that would be provided by orchestrator
            # These match the variables used in README.md.j2 template
            template_vars = {
                "project_name": project_name,
                "goal": "Automation for processing PDF invoices",
                "template_version": "3.0.0",
                "orchestrator_sdk_version": "1.0.0",
                "user_name": "Test User",
                "current_date": "2025-01-03",
                "complexity": "medium",
                "tech_stack": ["Python", "PyPDF2", "pandas"],
                "agents": ["pdf_processor", "data_extractor"],
                "apis": [],  # No external APIs for this test
                "input_description": "PDF invoice files",
                "output_description": "Extracted invoice data in JSON format",
                "workflow_steps": [
                    "Load PDF file",
                    "Extract text and data",
                    "Parse invoice fields",
                    "Export to JSON"
                ],
            }

            # Render README.md
            readme_template = env.get_template("README.md.j2")
            readme_content = readme_template.render(**template_vars)
            (project_path / "README.md").write_text(readme_content)

            # Render CLAUDE.md
            claude_template = env.get_template("CLAUDE.md.j2")
            claude_content = claude_template.render(**template_vars)
            (project_path / "CLAUDE.md").write_text(claude_content)

            # Note: QUICK_START.md.j2 doesn't exist in templates yet
            # It would be generated by @project-initializer in real workflow
            # For now, we skip it in this test

            # Create .claude directory
            claude_dir = project_path / ".claude"
            claude_dir.mkdir(parents=True)

            # Render PLANNING.md
            planning_template = env.get_template(".claude/PLANNING.md.j2")
            planning_content = planning_template.render(**template_vars)
            (claude_dir / "PLANNING.md").write_text(planning_content)

            # VALIDATIONS
            # 1. Project structure exists
            assert project_path.exists(), "Project directory should exist"
            assert project_path.is_dir(), "Project path should be a directory"

            # 2. Key files generated
            assert (project_path / "README.md").exists(), "README.md should exist"
            assert (project_path / "CLAUDE.md").exists(), "CLAUDE.md should exist"
            assert (claude_dir / "PLANNING.md").exists(), "PLANNING.md should exist"
            # Note: QUICK_START.md would be generated by @project-initializer

            # 3. README content validation
            readme = (project_path / "README.md").read_text()
            assert project_name in readme, "Project name should appear in README"
            assert "3.0.0" in readme, "Template version should appear in README"
            assert "1.0.0" in readme, "SDK version should appear in README"
            assert "PDF" in readme, "PDF should appear in goal/input/workflow"
            assert "invoice" in readme.lower(), "Invoice should appear in README"

            # 4. CLAUDE.md content validation
            claude = (project_path / "CLAUDE.md").read_text()
            assert "factura_automation" in claude, "Project name in CLAUDE.md"
            assert "PDF" in claude, "PDF topic in CLAUDE.md"
            # Note: Agent names may not appear depending on template sections

            # 5. PLANNING.md content validation
            planning = (claude_dir / "PLANNING.md").read_text()
            assert "Arquitectura" in planning, "Architecture section in PLANNING.md"
            assert "python" in planning.lower(), "Language mentioned in PLANNING.md"

            # 6. Version consistency check
            assert "3.0.0" in readme, "Template version in README"
            assert "1.0.0" in readme, "SDK version in README"


class TestE2ETemplateVariables:
    """Test that template variables are correctly rendered."""

    def test_all_template_variables_rendered(self):
        """
        Test that no Jinja2 variables remain unrendered.

        This catches common template rendering errors where variables
        are not provided or have typos.
        """
        with tempfile.TemporaryDirectory() as tmpdir:
            working_dir = Path(tmpdir)
            project_path = working_dir / "test_project"

            from jinja2 import Environment, FileSystemLoader

            template_dir = Path(".claude/templates/base")
            env = Environment(loader=FileSystemLoader(str(template_dir)))

            # Create project directory
            project_path.mkdir(parents=True)

            # Comprehensive template variables matching README.md.j2
            template_vars = {
                "project_name": "test_project",
                "goal": "Test automation project",
                "template_version": "3.0.0",
                "orchestrator_sdk_version": "1.0.0",
                "user_name": "Test User",
                "current_date": "2025-01-03",
                "complexity": "high",
                "tech_stack": ["Python", "requests"],
                "agents": ["test_agent"],
                "apis": [],
                "input_description": "Test input data",
                "output_description": "Test output data",
                "workflow_steps": ["Step 1", "Step 2"],
            }

            # Render README
            readme_template = env.get_template("README.md.j2")
            readme_content = readme_template.render(**template_vars)

            # Check for unreplaced Jinja2 syntax
            assert "{{" not in readme_content, "Unreplaced Jinja2 variables in README"
            assert "{%" not in readme_content, "Unreplaced Jinja2 blocks in README"

            # Render CLAUDE.md
            claude_template = env.get_template("CLAUDE.md.j2")
            claude_content = claude_template.render(**template_vars)

            assert "{{" not in claude_content, "Unreplaced Jinja2 variables in CLAUDE.md"
            assert "{%" not in claude_content, "Unreplaced Jinja2 blocks in CLAUDE.md"


class TestE2EVersionTracking:
    """Test that version tracking works in generated projects."""

    def test_version_appears_in_generated_project(self):
        """
        Test that both template version and SDK version appear correctly
        in generated project files.
        """
        with tempfile.TemporaryDirectory() as tmpdir:
            working_dir = Path(tmpdir)
            project_path = working_dir / "version_test_project"

            from jinja2 import Environment, FileSystemLoader

            template_dir = Path(".claude/templates/base")
            env = Environment(loader=FileSystemLoader(str(template_dir)))

            project_path.mkdir(parents=True)

            template_vars = {
                "project_name": "version_test_project",
                "goal": "Version tracking test",
                "template_version": "3.0.0",
                "orchestrator_sdk_version": "1.0.0",
                "user_name": "Test User",
                "current_date": "2025-01-03",
                "complexity": "base",
                "tech_stack": ["Python"],
                "agents": [],
                "apis": [],
                "input_description": "Test input",
                "output_description": "Test output",
                "workflow_steps": ["Process data"],
            }

            # Render README
            readme_template = env.get_template("README.md.j2")
            readme_content = readme_template.render(**template_vars)
            (project_path / "README.md").write_text(readme_content)

            readme = (project_path / "README.md").read_text()

            # Validate version tracking
            assert "3.0.0" in readme, \
                "Template version 3.0.0 should appear in generated README"

            assert "1.0.0" in readme, \
                "Orchestrator SDK version 1.0.0 should appear in generated README"

            # Check that version appears in a badge or clear section
            assert ("Version" in readme or "version" in readme), \
                "Version should be clearly labeled"


class TestE2EComplexityLevels:
    """Test that different complexity levels render correctly."""

    @pytest.mark.parametrize("complexity", ["base", "medium", "high"])
    def test_complexity_templates_render(self, complexity):
        """
        Test that base, medium, and high complexity levels render correctly.

        All complexity levels use the base templates with different variables.
        Medium and high add additional agents/features on top of base.
        """
        with tempfile.TemporaryDirectory() as tmpdir:
            working_dir = Path(tmpdir)
            project_path = working_dir / f"{complexity}_project"

            from jinja2 import Environment, FileSystemLoader

            # All complexity levels use base templates
            # Medium and high just add additional agents/features
            template_dir = Path(".claude/templates/base")

            env = Environment(loader=FileSystemLoader(str(template_dir)))

            project_path.mkdir(parents=True)

            template_vars = {
                "project_name": f"{complexity}_project",
                "goal": f"Test project with {complexity} complexity",
                "template_version": "3.0.0",
                "orchestrator_sdk_version": "1.0.0",
                "user_name": "Test User",
                "current_date": "2025-01-03",
                "complexity": complexity,
                "tech_stack": ["Python", "requests"] if complexity != "base" else ["Python"],
                "agents": ["agent1"] if complexity != "base" else [],
                "apis": [],
                "input_description": f"Input for {complexity} complexity",
                "output_description": f"Output for {complexity} complexity",
                "workflow_steps": ["Step 1", "Step 2"] if complexity != "base" else ["Process"],
            }

            # Render README
            readme_template = env.get_template("README.md.j2")
            readme_content = readme_template.render(**template_vars)

            # Basic validations
            # Project name should appear
            assert f"{complexity}_project" in readme_content, \
                f"Project name should appear in README"

            assert "3.0.0" in readme_content, "Template version should appear"

            # No unreplaced variables
            assert "{{" not in readme_content, "No unreplaced Jinja2 variables"

            # Complexity-specific features validated
            assert complexity in readme_content.lower() or f"{complexity}_project" in readme_content, \
                "Complexity level or project name should appear"


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
